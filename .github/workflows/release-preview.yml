name: Publish NuGet Prereleases

on:
  push:
    branches:
      - master
    paths:
      - 'MiniTwitch.Common/**'
      - 'MiniTwitch.Helix/**'
      - 'MiniTwitch.Irc/**'
      - 'MiniTwitch.PubSub/**'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      common-changed: ${{ steps.check-common.outputs.changed }}
      helix-changed: ${{ steps.check-helix.outputs.changed }}
      irc-changed: ${{ steps.check-irc.outputs.changed }}
      pubsub-changed: ${{ steps.check-pubsub.outputs.changed }}
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check MiniTwitch.Common changes
        id: check-common
        run: |
          if git diff --quiet ${{ github.event.before }} ${{ github.sha }} -- MiniTwitch.Common; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Check MiniTwitch.Helix changes
        id: check-helix
        run: |
          if git diff --quiet ${{ github.event.before }} ${{ github.sha }} -- MiniTwitch.Helix; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Check MiniTwitch.Irc changes
        id: check-irc
        run: |
          if git diff --quiet ${{ github.event.before }} ${{ github.sha }} -- MiniTwitch.Irc; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi
          
      - name: Check MiniTwitch.PubSub changes
        id: check-pubsub
        run: |
          if git diff --quiet ${{ github.event.before }} ${{ github.sha }} -- MiniTwitch.PubSub; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Generate project matrix
        id: set-matrix
        run: |
          matrix='[]'
          if [ "${{ steps.check-common.outputs.changed }}" = "true" ]; then
            matrix=$(echo $matrix | jq -c '. += [{"project-name": "MiniTwitch.Common", "project-dir": "MiniTwitch.Common"}]')
          fi
          if [ "${{ steps.check-helix.outputs.changed }}" = "true" ]; then
            matrix=$(echo $matrix | jq -c '. += [{"project-name": "MiniTwitch.Helix", "project-dir": "MiniTwitch.Helix"}]')
          fi
          if [ "${{ steps.check-irc.outputs.changed }}" = "true" ]; then
            matrix=$(echo $matrix | jq -c '. += [{"project-name": "MiniTwitch.Irc", "project-dir": "MiniTwitch.Irc"}]')
          fi
          if [ "${{ steps.check-pubsub.outputs.changed }}" = "true" ]; then
            matrix=$(echo $matrix | jq -c '. += [{"project-name": "MiniTwitch.PubSub", "project-dir": "MiniTwitch.PubSub"}]')
          fi
          echo "matrix=$matrix" >> $GITHUB_OUTPUT
          echo "Generated matrix: $matrix"

  publish:
    needs: detect-changes
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup .NET 9
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 9.0.x
          
      - name: Extract Package Version
        id: get-version
        run: |
          VERSION=$(grep '<PackageVersion>' ${{ matrix.project.project-dir }}/${{ matrix.project.project-name }}.csproj | sed -E 's/.*<PackageVersion>(.*)<\/PackageVersion>.*/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
      - name: Generate prerelease version
        id: prerelease-version
        run: |
          BASE_VERSION=$(echo "${{ steps.get-version.outputs.version }}" | grep -Eo '^[0-9]+\.[0-9]+\.[0-9]+')
          if [ -z "$BASE_VERSION" ]; then
            echo "Error: Could not parse base version from ${{ steps.get-version.outputs.version }}"
            exit 1
          fi
          
          IFS='.' read -ra VERSION_PARTS <<< "$BASE_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          NEW_PATCH=$((PATCH + 1))
          TIMESTAMP=$(date +%s)
          
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH-ts.$TIMESTAMP"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Build project
        working-directory: ${{ matrix.project.project-dir }}
        run: dotnet build --configuration Release
          
      - name: Pack project
        working-directory: ${{ matrix.project.project-dir }}
        run: |
          dotnet pack \
            --configuration Release \
            --no-build \
            -p:PackageVersion=${{ steps.prerelease-version.outputs.new_version }}
            
      - name: Push to NuGet
        run: |
          dotnet nuget push ${{ matrix.project.project-dir }}/bin/Release/${{ matrix.project.project-name }}.${{ steps.prerelease-version.outputs.new_version }}.nupkg \
            --api-key ${{ secrets.NUGET_API_KEY }} \
            --source https://api.nuget.org/v3/index.json